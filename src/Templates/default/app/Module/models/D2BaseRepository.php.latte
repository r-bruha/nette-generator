{syntax double}{{$php|noescape}} namespace App{{$module}}\Models;
/** This BaseRepository was automatically generated by Nette generator. */
abstract class BaseRepository extends \Nette\Object {
	/** @var \Kdyby\Doctrine\EntityManager */
	protected $entityManager;
	/** @var \Kdyby\Doctrine\EntityDao */
	protected $dataAccessObject;
	/** @var string */
	protected $className, $fullClassName;

	public function __construct($table, \Kdyby\Doctrine\EntityManager $entityManager) {
		$this->entityManager = $entityManager;
		$this->className = implode('', array_map(function($value) { return ucfirst($value); }, explode('_', $table)));
		$this->fullClassName = "\Kdyby\Doctrine\\$this->className";
		$this->dataAccessObject = $this->entityManager->getDao("\Kdyby\Doctrine\\$this->className");
	}
	
	/**
	 * Return table rows
	 * @param array $where
	 * @param array $order
	 * @param array $limit
	 * @param array $what
	 * @return array
	 */
	public function getAll(array $where = NULL, array $order = NULL, array $limit = NULL, array $what = NULL) {
		$table = $this->dataAccessObject->createQueryBuilder()->select($this->className)->from($this->fullClassName, $this->className);
		if (!empty($what)) {
			$old = mb_substr(key($what), 0,  mb_strpos(key($what), '.'));
			$sql = '';
			foreach ($what as $k => $v) $sql .= str_replace($old, $this->className, str_replace('_id', '', $k)) . " AS $v, ";
			$table->add('select', new \Doctrine\ORM\Query\Expr\Select(mb_substr($sql, 0, -2)));
		}
		
		$i = 0;
		if (!empty($where)) foreach ($where as $w) if ($w['val'] !== '') {
			$joinTable = explode('.', $w['col']);
			$joinTableColumn = $joinTable[1];
			$joinTable = $joinTable[0];
			$joinTableSanitized = implode('', array_map(function($value) { return ucfirst($value); }, explode('_', $joinTable)));
			if ($joinTableSanitized !== $this->className) {
				$table->leftJoin("$this->className.$joinTable", $joinTableSanitized);
				switch ($w['mod']) {
					case 'IS NULL': $table->andWhere($table->expr()->isNull("$joinTableSanitized.$joinTableColumn")); break;
					case 'IS NOT NULL': $table->andWhere($table->expr()->isNotNull("$joinTableSanitized.$joinTableColumn")); break;
					default: $table->andWhere("$joinTableSanitized.$joinTableColumn {$w['mod']} ?$i")->setParameter($i++, in_array($w['mod'], ['LIKE', 'NOT LIKE']) ? "%{$w['val']}%" : $w['val']); break;
				}
			} else {
				switch ($w['mod']) {
					case 'IS NULL': $table->andWhere($table->expr()->isNull("$this->className.$joinTableColumn")); break;
					case 'IS NOT NULL': $table->andWhere($table->expr()->isNotNull("$this->className.$joinTableColumn")); break;
					default: $table->andWhere("$this->className.$joinTableColumn {$w['mod']} ?$i")->setParameter($i++, in_array($w['mod'], ['LIKE', 'NOT LIKE']) ? "%{$w['val']}%" : $w['val']); break;
				}
			}
		}
		if (!empty($order)) foreach ($order as $o) {
			$joinTable = mb_strpos($o, '-') === 0 ? explode('.', mb_substr($o, 1)) : explode('.', $o);
			$joinTableColumn = $joinTable[1];
			$joinTable = $joinTable[0];
			$joinTableSanitized = implode('', array_map(function($value) { return ucfirst($value); }, explode('_', $joinTable)));
			if ($joinTableSanitized !== $this->className) {
				$table->leftJoin("$this->className.$joinTable", $joinTableSanitized);
				$table->addOrderBy($joinTableSanitized . '.' . mb_substr($o, mb_strpos($o, '.') + 1), mb_strpos($o, '-') === 0 ? 'DESC' : 'ASC');
			} else {
				$table->addOrderBy($this->className . '.' . mb_substr($o, mb_strpos($o, '.') + 1), mb_strpos($o, '-') === 0 ? 'DESC' : 'ASC');
			}
		}
		if (!empty($limit)) $table->setMaxResults($limit['lim'])->setFirstResult($limit['off']);
		return $table->getQuery()->getResult();
	}

	/**
	 * Return count of pages needed for show table rows
	 * @param array $where
	 * @param array $limit
	 * @return integer
	 */
	public function getPages(array $where = NULL, array $limit = NULL) {
		$table = $this->dataAccessObject->createQueryBuilder()->select("COUNT($this->className)")->from($this->fullClassName, $this->className);
		$i = 0;
		if (!empty($where)) foreach ($where as $w) if ($w['val'] !== '') {
			$joinTable = explode('.', $w['col']);
			$joinTableColumn = $joinTable[1];
			$joinTable = $joinTable[0];
			$joinTableSanitized = implode('', array_map(function($value) { return ucfirst($value); }, explode('_', $joinTable)));
			if ($joinTableSanitized !== $this->className) {
				$table->leftJoin("$this->className.$joinTable", $joinTableSanitized);
				switch ($w['mod']) {
					case 'IS NULL': $table->andWhere($table->expr()->isNull("$joinTableSanitized.$joinTableColumn")); break;
					case 'IS NOT NULL': $table->andWhere($table->expr()->isNotNull("$joinTableSanitized.$joinTableColumn")); break;
					default: $table->andWhere("$joinTableSanitized.$joinTableColumn {$w['mod']} ?$i")->setParameter($i++, in_array($w['mod'], ['LIKE', 'NOT LIKE']) ? "%{$w['val']}%" : $w['val']); break;
				}
			} else {
				switch ($w['mod']) {
					case 'IS NULL': $table->andWhere($table->expr()->isNull("$this->className.$joinTableColumn")); break;
					case 'IS NOT NULL': $table->andWhere($table->expr()->isNotNull("$this->className.$joinTableColumn")); break;
					default: $table->andWhere("$this->className.$joinTableColumn {$w['mod']} ?$i")->setParameter($i++, in_array($w['mod'], ['LIKE', 'NOT LIKE']) ? "%{$w['val']}%" : $w['val']); break;
				}
			}
		}
		return ceil($table->getQuery()->getSingleScalarResult() / (int)$limit['lim']);
	}

	/**
	 * Return table row
	 * @param string $primaryKey
	 * @return
	 */
	public function get($primaryKey) {
		$classMetadata = $this->entityManager->getClassMetadata($this->fullClassName);
		$indexes = [];
		if (isset($classMetadata->table['indexes'])) foreach ($classMetadata->table['indexes'] as $m) $indexes[] = $m['columns'][0];
		$row = $this->objectToArray($this->dataAccessObject->find($primaryKey));
		foreach ($row as $key => $value) {
			if ($value instanceof \DateTime) {
				$row[$key] = $value->format('c');
				continue;
			}
			if (is_object($value)) {
				$getters = $setters = NULL;
				foreach (get_class_methods(get_class($value)) as $method) {
					if(mb_strpos($method, 'get') === 0 && $method !== 'getReflection') $getters[] = str_replace('get', '', $method);
					if(mb_strpos($method, 'set') === 0) $setters[] = str_replace('set', '', $method);
				}
				$column = array_slice(array_filter($indexes, function($value) use ($key) { return mb_strpos($value, $key) !== FALSE; }), 0, 1)[0];
				$newKey = 'get' . array_values(array_diff($getters, $setters))[0];
				$row[$column] = $value->$newKey();
			}
		}
		return $row;
	}

	private function objectToArray($object) {
		$array = [];
		foreach (get_class_methods(get_class($object)) as $method) {
			if (mb_strpos($method, 'get') !== FALSE && $method !== '__get' && $method !== 'getReflection') {
				$property = lcfirst(substr($method, 3));
				$array[$property] = $object->$property;
			}
		}	
		return $array;
	}

	/**
	 * Save table row
	 * @param type $primaryKey
	 * @param type $values
	 * @return
	 */
	public function save($primaryKey, array $values) {
		$classMetadata = $this->entityManager->getClassMetadata($this->fullClassName);
		$indexes = [];
		if (isset($classMetadata->table['indexes'])) foreach ($classMetadata->table['indexes'] as $m) $indexes[] = $m['columns'][0];	
		$entity = ($primaryKey = $primaryKey ?: FALSE) ? $this->dataAccessObject->find($primaryKey) : new $this->fullClassName();
		foreach ($values as $key => $value) {
			if ($value === '') $value = NULL;
			$column = array_slice(array_filter($indexes, function($value) use ($key) { return mb_strpos($value, $key) !== FALSE; }), 0, 1);
			if (!empty($column)) {
				$key = str_replace('_id', '', $key);
				$keyEntity = '\Kdyby\Doctrine\\' . implode('', array_map(function($value) { return ucfirst($value); }, explode('_', $key)));
				$dao = $this->entityManager->getDao($keyEntity);
				$entity->$key = $dao->find($value);
			} else {
				if (in_array($classMetadata->getTypeOfField($key), ['datetime', 'timestamp'])) $value = new \DateTime($value);
				$newKey = 'set' . ucfirst($key);
				$entity->$newKey($value);
			}
		}
		try {
			$this->dataAccessObject->save($entity);
		} catch(\Kdyby\Doctrine\DuplicateEntryException $e) {
			$pdo = new \PDOException($e->getPrevious()->getPrevious()->getMessage(), $e->getPrevious()->getPrevious()->getCode());
			$pdo->errorInfo = $e->getPrevious()->getPrevious()->errorInfo;
			throw $pdo;
		}
		return $entity;
	}

	/**
	 * Remove table row
	 * @param string $primaryKey
	 * @return
	 */
	public function remove($primaryKey) {
		try {
			$this->dataAccessObject->delete($this->dataAccessObject->find($primaryKey));
		} catch (\Kdyby\Doctrine\DBALException $e) {
			$pdo = new \PDOException($e->getPrevious()->getPrevious()->getMessage(), $e->getPrevious()->getPrevious()->getCode());
			$pdo->errorInfo = $e->getPrevious()->getPrevious()->errorInfo;
			throw $pdo;
		}
	}
}